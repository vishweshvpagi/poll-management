{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vishw\\\\Desktop\\\\Project1\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback } from \"react\";\n\n// Create Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true); // To handle initial loading state\n  const [error, setError] = useState(null);\n\n  // Load user from localStorage or validate token\n  useEffect(() => {\n    const initializeAuth = async () => {\n      setLoading(true);\n      try {\n        const storedUser = localStorage.getItem(\"user\");\n        const token = localStorage.getItem(\"token\");\n        if (storedUser && token) {\n          // Optional: Validate token with an API\n          const isValid = await validateToken(token);\n          if (isValid) {\n            setUser(JSON.parse(storedUser));\n          } else {\n            clearStorage();\n          }\n        }\n      } catch (err) {\n        console.error(\"Failed to initialize authentication:\", err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n\n  // Login function with token handling\n  const login = async credentials => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"/api/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(credentials)\n      });\n      if (!response.ok) {\n        throw new Error(\"Login failed\");\n      }\n      const {\n        userData,\n        token\n      } = await response.json();\n      setUser(userData);\n      localStorage.setItem(\"user\", JSON.stringify(userData));\n      localStorage.setItem(\"token\", token);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = useCallback(() => {\n    setUser(null);\n    clearStorage();\n  }, []);\n\n  // Clear localStorage\n  const clearStorage = () => {\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n  };\n\n  // Validate token (example: make API call to check token validity)\n  const validateToken = async token => {\n    try {\n      const response = await fetch(\"/api/validate-token\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          token\n        })\n      });\n      return response.ok;\n    } catch {\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      loading,\n      error\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"sueCisNyXOjsk1KBGP223az8Dy4=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","initializeAuth","storedUser","localStorage","getItem","token","isValid","validateToken","JSON","parse","clearStorage","err","console","login","credentials","response","fetch","method","headers","body","stringify","ok","Error","userData","json","setItem","message","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/vishw/Desktop/Project1/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from \"react\";\r\n\r\n// Create Context\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true); // To handle initial loading state\r\n  const [error, setError] = useState(null);\r\n\r\n  // Load user from localStorage or validate token\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const storedUser = localStorage.getItem(\"user\");\r\n        const token = localStorage.getItem(\"token\");\r\n        if (storedUser && token) {\r\n          // Optional: Validate token with an API\r\n          const isValid = await validateToken(token);\r\n          if (isValid) {\r\n            setUser(JSON.parse(storedUser));\r\n          } else {\r\n            clearStorage();\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Failed to initialize authentication:\", err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  // Login function with token handling\r\n  const login = async (credentials) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(\"/api/login\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(credentials),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(\"Login failed\");\r\n      }\r\n      const { userData, token } = await response.json();\r\n      setUser(userData);\r\n      localStorage.setItem(\"user\", JSON.stringify(userData));\r\n      localStorage.setItem(\"token\", token);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = useCallback(() => {\r\n    setUser(null);\r\n    clearStorage();\r\n  }, []);\r\n\r\n  // Clear localStorage\r\n  const clearStorage = () => {\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"token\");\r\n  };\r\n\r\n  // Validate token (example: make API call to check token validity)\r\n  const validateToken = async (token) => {\r\n    try {\r\n      const response = await fetch(\"/api/validate-token\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ token }),\r\n      });\r\n      return response.ok;\r\n    } catch {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout, loading, error }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}